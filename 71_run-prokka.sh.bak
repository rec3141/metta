#/bin/bash
# this program runs prokka annotation on mega co-assembly
# then runs kaiju to get identifications

# DON'T RUN THIS IN PARALLEL; kaiju uses all the RAM
# input $1 is the co-assembly
# input $2 is the the metabat depth matrix

module load lang/Anaconda3/2.5.0
source activate `pwd`/prokka

module load bio/BLAST+/2.6.0-pic-intel-2016b-Python-2.7.12
export PATH=bin/:$PATH
export PERL5LIB=/home/recollins/work/nanobase/Arctic_metagenomes/prokka/lib/site_perl/5.26.2:/home/recollins/work/nanobase/Arctic_metagenomes/prokka/lib/5.26.2

prokka --help

assembly=$1
metabat=$2

kaijudir=annotation/kaiju
prokkadir=annotation/prokka
vizbindir=binning/vizbin
sketchdir=annotation/sketch
spadesdir=assembly/spades
kjdb=~/sfosdna/reference_dbs/kaiju

echo "start $assembly"

d1=`dirname $assembly`
f1=`basename $assembly .fasta`
echo $f1

cut -f1-3 $metabat | tr $'\t' ',' > $d1/$f1.metabat.txt

# to make prokka happy
sed -E 's/(^>.{37}).*/\1/' $assembly > $d1/$f1.assembly.fasta

#run prokka
if [ ! -d "$prokkadir/prokka_$f1" ]; then 
	echo "running prokka"
	prokka --metagenome --outdir $prokkadir/prokka_$f1 --prefix $f1 --locustag $f1 --force --fast --rawproduct $d1/$f1.assembly.fasta
fi;

# match orfs to nodes
awk -v OFS='\t' 'BEGIN{feature=0}{if($0 ~ /^>/){feature=$2};if($0 ~ /locus_tag/){print feature,$2}}' $prokkadir/prokka_$f1/$f1.tbl | sort -k2,2 > $kaijudir/$f1.kaiju_nodes.tsv

#run kaiju
if [ ! -e "$kaijudir/$f1.kaiju.tsv" ]; then
	echo "running kaiju"
	/work/cryomics/apps/kaiju/bin/kaiju -t $kjdb/nodes.dmp -f $kjdb/kaiju_db_nr_euk.fmi -p -i $prokkadir/prokka_$f1/$f1.faa -a greedy -e 5 -o $kaijudir/$f1.kaiju.tsv -z 12
fi;

#get orf taxonomy
/work/cryomics/apps/kaiju/bin/addTaxonNames -t $kjdb/nodes.dmp -n $kjdb/names.dmp -r "no rank",superkingdom,phylum,class,order,family,genus,species -i $kaijudir/$f1.kaiju.tsv -o $kaijudir/$f1.kaiju_names_all.tsv
# options: class cohort family forma genus infraclass infraorder kingdom no rank order parvorder phylum species species group species subgroup subclass subfamily subgenus subkingdom suborder subphylum subspecies subtribe superclass superfamily superkingdom superorder superphylum tribe varietas

#sort metabat
sort -k1,1 -t',' $kaijudir/$f1.metabat.txt > $kaijudir/$f1.metabat.sort.txt

#taxonomy list
for tax in superkingdom phylum class order family genus species; do

	echo $tax
	/work/cryomics/apps/kaiju-1.6.3/bin/addTaxonNames -t $kjdb/nodes.dmp -n $kjdb/names.dmp -r $tax -i $kaijudir/$f1.kaiju.tsv -o $kaijudir/$f1.kaiju_names_$tax.tsv

	sort -k3 $kaijudir/$f1.kaiju_names_$tax.tsv | cut -f3,4 | sort -k1,1 -u | tr $'\t' '|' > $kaijudir/$f1.kaiju_names_sort_$tax.tsv

	#merge orfs and nodes, keeping only most common taxonomic hit
	join -1 2 -2 2 -t $'\t' $kaijudir/$f1.kaiju_nodes.tsv <(sort -k2,2 $kaijudir/$f1.kaiju_names_$tax.tsv) | cut -f2,4 | sort | uniq -c | sed 's/^ *//' | sort -k2,2 -k1,1rn | awk '{print $3 "\t" $2}' |  grep -v '^0' | uniq -f1 | sort -k1,1 | tr $'\t' '|' > $kaijudir/$f1.nodes_$tax.tsv
	join -1 1 -2 1 -t '|' <(sort -k1,1 $kaijudir/$f1.nodes_$tax.tsv) <(sort -k1,1 $kaijudir/$f1.kaiju_names_sort_$tax.tsv) | cut -f2- -d'|'| tr '|' ',' | sort -k2 -t',' >  $kaijudir/$f1.nodes_$tax.csv


	#get orf colors
	cut -f2 -d',' $kaijudir/$f1.nodes_$tax.csv | uniq > $kaijudir/$f1.names_$tax.tsv
	color=`md5 <(echo -e $line) | cut -f4 -d' '| cut -b1,3,5,7,9,11`
	while read line; do echo "#$color";  done < $kaijudir/$f1.names_$tax.tsv > $kaijudir/$f1.colors_$tax.tsv
	paste -d',' $kaijudir/$f1.colors_$tax.tsv $kaijudir/$f1.names_$tax.tsv > $kaijudir/$f1.taxcolors_$tax.csv

	#merge orfs and colors
	echo -e "Node,Taxonomy,Color" > $kaijudir/$f1.bandage_$tax.csv
	join -1 2 -2 2 -t',' <(sort -k2,2 -t',' $kaijudir/$f1.nodes_$tax.csv) <(sort -k2,2 -t',' $kaijudir/$f1.taxcolors_$tax.csv) | awk -v OFS=',' -v FS=',' '{print $2,$1,$3}' >> $kaijudir/$f1.bandage_$tax.csv

	#merge with metabat
	sort -k1,1 -t',' $kaijudir/$f1.bandage_$tax.csv > $kaijudir/$f1.bandage_$tax.sort.csv
	join -1 1 -2 1 -t',' $kaijudir/$f1.metabat.sort.txt $kaijudir/$f1.bandage_$tax.sort.csv > $kaijudir/$f1.rcolor_$tax.csv

done;


echo "done $assembly"




